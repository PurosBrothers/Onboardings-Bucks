#!/usr/bin/env python3
"""
Script para limpiar y recrear completamente un usuario de pruebas y sus m√≥dulos relacionados en una base de datos MongoDB.

Este script realiza las siguientes acciones:
1. Carga las variables de entorno necesarias desde el archivo .env, buscando en varias ubicaciones posibles.
2. Verifica que todas las variables de entorno requeridas para la conexi√≥n y el usuario est√©n presentes.
3. Se conecta a la base de datos MongoDB utilizando credenciales y par√°metros de entorno.
4. Elimina todos los datos existentes del usuario objetivo (identificado por email) en las colecciones relevantes (users, modules, integrations).
5. Crea un nuevo usuario de pruebas con los datos especificados en el .env.
6. Crea los m√≥dulos de costos y gastos asociados a ese usuario.
7. Crea la integraci√≥n correspondiente para el usuario.
8. Actualiza el archivo .env para reflejar el nuevo UID del usuario creado.
9. Incluye mensajes de depuraci√≥n detallados para facilitar el diagn√≥stico de problemas de conexi√≥n o configuraci√≥n.

El script est√° dise√±ado para entornos de desarrollo y pruebas, permitiendo reiniciar el estado de un usuario y sus m√≥dulos de manera segura y automatizada.
Script refactorizado para usar configuraci√≥n desde diccionario en lugar de .env
Configuraci√≥n del usuario de pruebas usando datos del YAML via Hydra.
"""

import sys
from urllib.parse import quote_plus
from datetime import datetime
from argon2 import PasswordHasher
from src.utils.mongodb_manager import MongoDBManager
from bson import ObjectId
from src.usuario.user_manager import UserManager
from pathlib import Path
import asyncio

# =============================
# CONFIGURACI√ìN DE CONEXI√ìN A MONGODB
# =============================
def obtener_config_ambiente(diccionario_config: dict, ambiente: str):
    """
    Obtiene la configuraci√≥n de conexi√≥n desde el diccionario de configuraci√≥n.
    
    Args:
        diccionario_config: Diccionario con toda la configuraci√≥n del YAML
        ambiente: Ambiente objetivo (DEV, STAGING, PROD)
    
    Returns:
        dict: Configuraci√≥n de conexi√≥n a MongoDB
    """
    config_mongodb = diccionario_config['mongodb'][ambiente]
    
    return {
        "aws_access_key_id": config_mongodb['aws_access_key_id'],
        "aws_secret_access_key": config_mongodb['aws_secret_access_key'],
        "cluster_url": config_mongodb['cluster_url'],
        "db_name": config_mongodb['db_name'],
        "app_name": config_mongodb['app_name']
    }

def obtener_config_mongodb(diccionario_config: dict, ambiente: str):
    """
    Crea la configuraci√≥n de MongoDB usando los datos del diccionario.
    Como MongoDBConfig espera un env_prefix, temporalmente seteamos las variables de entorno.
    
    Args:
        diccionario_config: Diccionario con toda la configuraci√≥n del YAML
        ambiente: Ambiente objetivo (DEV, STAGING, PROD)
    
    Returns:
        MongoDBConfig: Configuraci√≥n de MongoDB
    """
    import os
    from src.config.mongodb_config import MongoDBConfig
    
    # Obtener los datos de MongoDB del diccionario
    datos_mongodb = diccionario_config['mongodb'][ambiente]
    
    # Temporarily set environment variables para que MongoDBConfig funcione
    # Guardamos los valores originales para restaurarlos despu√©s
    entorno_original = {}
    variables_entorno = {
        f"{ambiente}_AWS_ACCESS_KEY_ID": datos_mongodb['aws_access_key_id'],
        f"{ambiente}_AWS_SECRET_ACCESS_KEY": datos_mongodb['aws_secret_access_key'],
        f"{ambiente}_CLUSTER_URL": datos_mongodb['cluster_url'],
        f"{ambiente}_DB": datos_mongodb['db_name'],
        f"{ambiente}_APP_NAME": datos_mongodb['app_name']
    }
    
    # Setear las variables de entorno temporalmente
    for clave, valor in variables_entorno.items():
        entorno_original[clave] = os.environ.get(clave)  # Guardar valor original
        os.environ[clave] = str(valor)
    
    try:
        # Crear MongoDBConfig con el env_prefix como espera
        config_mongodb = MongoDBConfig(env_prefix=ambiente)
        return config_mongodb
    finally:
        # Restaurar las variables de entorno originales
        for clave, valor_original in entorno_original.items():
            if valor_original is None:
                os.environ.pop(clave, None)
            else:
                os.environ[clave] = valor_original

# =============================
# FUNCIONES DE VALIDACI√ìN
# =============================
def validar_config_usuario(config_usuario: dict):
    """
    Valida que todos los par√°metros requeridos del usuario est√©n presentes.
    
    Args:
        config_usuario: Diccionario con la configuraci√≥n del usuario
    """
    campos_requeridos = [
        'email', 'password', 'name', 'lastname', 
        'phone', 'expense_code', 'cost_code'
    ]
    
    campos_faltantes = []
    for campo in campos_requeridos:
        if not config_usuario.get(campo):
            campos_faltantes.append(campo)
    
    if campos_faltantes:
        print(f"\n‚ùå Faltan campos requeridos en la configuraci√≥n del usuario: {', '.join(campos_faltantes)}")
        print("Por favor verifica tu archivo de configuraci√≥n YAML.")
        sys.exit(1)

def debug_config_usuario(config_usuario: dict):
    """
    Muestra la configuraci√≥n del usuario para debugging.
    
    Args:
        config_usuario: Diccionario con la configuraci√≥n del usuario
    """
    print("üîç Debugging configuraci√≥n del usuario desde YAML:")
    print(f"  - Email: {config_usuario.get('email', '‚úó Faltante')}")
    print(f"  - Password: {'‚úì Configurado' if config_usuario.get('password') else '‚úó Faltante'}")
    print(f"  - Name: {config_usuario.get('name', '‚úó Faltante')}")
    print(f"  - Lastname: {config_usuario.get('lastname', '‚úó Faltante')}")
    print(f"  - Phone: {config_usuario.get('phone', '‚úó Faltante')}")
    print(f"  - Expense Code: {config_usuario.get('expense_code', '‚úó Faltante')}")
    print(f"  - Cost Code: {config_usuario.get('cost_code', '‚úó Faltante')}")
    print("üîç Fin del debugging de configuraci√≥n del usuario\n")

# =============================
# FUNCIONES PRINCIPALES (Sin cambios en la l√≥gica)
# =============================
def limpiar_asociaciones_usuario(mongo_manager: MongoDBManager, email_usuario: str, id_usuario=None):
    """
    Elimina datos de m√≥dulos e integraciones del usuario, pero NO elimina el usuario si ya existe.
    """
    print("Iniciando limpieza de m√≥dulos e integraciones...")
    coleccion_usuarios = mongo_manager.db["users"]
    uid = None
    
    if id_usuario is None:
        usuario = coleccion_usuarios.find_one({"email": email_usuario})
        if usuario:
            uid = usuario["_id"]
            coleccion_usuarios.delete_one({"_id": uid})
            print(f"Usuario ya existe con UID: {uid}")
        else:
            print("No se encontr√≥ usuario existente para limpiar m√≥dulos/integraciones")
            return None
    else:
        try:
            uid = ObjectId(id_usuario)
        except Exception:
            uid = id_usuario
        coleccion_usuarios.delete_one({"_id": uid})
    
    # Limpiar solo m√≥dulos e integraciones
    colecciones_a_limpiar = ["modules", "integrations"]
    total_eliminados = 0
    
    for nombre_coleccion in colecciones_a_limpiar:
        try:
            coleccion = mongo_manager.db[nombre_coleccion]
            resultado = coleccion.delete_many({"UID": uid})
            cantidad_eliminada = resultado.deleted_count
            total_eliminados += cantidad_eliminada
            
            if cantidad_eliminada > 0:
                print(f"  {nombre_coleccion}: {cantidad_eliminada} documentos eliminados")
            else:
                print(f"  {nombre_coleccion}: sin datos para eliminar")
        except Exception as e:
            print(f"  Error limpiando {nombre_coleccion}: {str(e)}")
    
    print(f"Total de documentos eliminados en m√≥dulos/integraciones: {total_eliminados}")
    return uid

def crear_modules(mongo_manager: MongoDBManager, id_usuario, codigo_modulo_costos: str, codigo_modulo_gastos: str):
    """
    Elimina los m√≥dulos existentes del usuario y crea los m√≥dulos de costos y gastos.
    """
    print("üì¶ Creando m√≥dulos...")
    
    coleccion_modulos = mongo_manager.db["modules"]
    tiempo_actual = datetime.now()

    # Convertir id_usuario a ObjectId si es necesario
    try:
        uid = ObjectId(id_usuario)
    except Exception:
        uid = id_usuario

    # Eliminar m√≥dulos existentes para evitar duplicados
    resultado_eliminacion = coleccion_modulos.delete_many({"UID": uid})
    print(f"M√≥dulos eliminados para UID {uid}: {resultado_eliminacion.deleted_count}")

    # Definir nuevos m√≥dulos
    modulo_costos = {
        "UID": uid,
        "name": "costos",
        "code": codigo_modulo_costos,
        "createdAt": tiempo_actual,
        "updatedAt": tiempo_actual,
        "__v": 0
    }

    modulo_gastos = {
        "UID": uid,
        "name": "gastos",
        "code": codigo_modulo_gastos,
        "createdAt": tiempo_actual,
        "updatedAt": tiempo_actual,
        "__v": 0
    }

    # Insertar nuevos m√≥dulos
    resultado_costos = coleccion_modulos.insert_one(modulo_costos)
    resultado_gastos = coleccion_modulos.insert_one(modulo_gastos)

    print(f"  ‚úì M√≥dulo de costos creado con ID: {resultado_costos.inserted_id}")
    print(f"  ‚úì M√≥dulo de gastos creado con ID: {resultado_gastos.inserted_id}")

    return {
        "costos_id": resultado_costos.inserted_id,
        "gastos_id": resultado_gastos.inserted_id
    }

def crear_integration(mongo_manager: MongoDBManager, id_usuario):
    """
    Crea la integraci√≥n de usuario con el m√≥dulo de costos y gastos.
    """
    coleccion_integraciones = mongo_manager.db["integrations"]
    tiempo_actual = datetime.now()

    # Convertir id_usuario a ObjectId si es necesario
    try:
        uid = ObjectId(id_usuario)
    except Exception:
        uid = id_usuario

    resultado_eliminacion = coleccion_integraciones.delete_many({"UID": uid})
    print(f"Integraciones eliminados para UID {uid}: {resultado_eliminacion.deleted_count}")

    # Definir la integraci√≥n
    integracion = {
        "UID": uid,
        "name": "Siigo OnPremise",
        "onPremise": True,
        "apiKey": None,
        "apiSecret": None,
        "__v": 0,
    }

    # Insertar la integraci√≥n
    resultado = coleccion_integraciones.insert_one(integracion)
    print(f"  ‚úì Integraci√≥n creada con ID: {resultado.inserted_id}")

    return resultado.inserted_id

# =============================
# FUNCI√ìN PRINCIPAL REFACTORIZADA
# =============================
async def setup_usuario(diccionario_config: dict, ambiente: str) -> str:
    """
    Configura el usuario usando la configuraci√≥n del diccionario en lugar del .env
    
    Args:
        diccionario_config: Diccionario con toda la configuraci√≥n del YAML
        ambiente: Ambiente objetivo (DEV, STAGING, PROD)
    
    Returns:
        str: UID del usuario configurado
    """
    try:
        # Extraer configuraciones
        config_usuario = diccionario_config['user']
        
        # Validar configuraci√≥n del usuario
        validar_config_usuario(config_usuario)
        debug_config_usuario(config_usuario)
        
        # Obtener configuraci√≥n de MongoDB
        config_objetivo = obtener_config_ambiente(diccionario_config, ambiente)
        config_mongodb = obtener_config_mongodb(diccionario_config, ambiente)
        
        print("üîç Intentando conectar a MongoDB...")
        print(f"üîç Usando URI: mongodb+srv://***:***@{config_objetivo['cluster_url']}?authSource=%24external&authMechanism=MONGODB-AWS&retryWrites=true&w=majority&appName={config_objetivo['app_name']}")
        
        gestor_mongo = MongoDBManager(config_mongodb)
        bd = gestor_mongo.db
        coleccion_usuarios = bd["users"]
        
        print("üîç MongoClient creado exitosamente")
        print("üîç Intentando hacer ping a MongoDB...")
        bd.command('ping')
        print("‚úì Conexi√≥n a MongoDB exitosa")
        
        print(f"\nConfigurando usuario: {config_usuario['email']}")
        print("=" * 50)
        
        # PASO 1: Buscar usuario existente
        usuario = coleccion_usuarios.find_one({"email": config_usuario['email']})
        
        if usuario:
            uid = str(usuario["_id"])
            print(f"Usuario ya existe con UID: {uid}")
            
            # Verificar si existen m√≥dulos y/o integraciones
            coleccion_modulos = bd["modules"]
            coleccion_integraciones = bd["integrations"]
            
            mod_costos = coleccion_modulos.find_one({"UID": usuario["_id"], "name": "costos"})
            mod_gastos = coleccion_modulos.find_one({"UID": usuario["_id"], "name": "gastos"})
            integracion = coleccion_integraciones.find_one({"UID": usuario["_id"]})
            
            if not mod_costos or not mod_gastos:
                print("Creando m√≥dulos que faltan...")
                crear_modules(gestor_mongo, uid, config_usuario['cost_code'], config_usuario['expense_code'])
            else:
                print("M√≥dulos ya existen, no se hace nada.")
            
            if not integracion:
                print("Creando integraci√≥n que falta...")
                crear_integration(gestor_mongo, uid)
            else:
                print("Integraci√≥n ya existe, no se hace nada.")
        else:
            print("Usuario no existe, creando usuario desde cero...")
            
            servicio_usuario = UserManager(
                name=config_usuario['name'],
                lastname=config_usuario['lastname'],
                email=config_usuario['email'],
                phone=config_usuario['phone'],
                password_plain=config_usuario['password'],
                num_consecutivo=1  # Valor por defecto o podr√≠as agregarlo al YAML
            )
            
            nuevo_usuario = await servicio_usuario.create_user()
            uid = str(nuevo_usuario.id)
            print(f"Usuario creado con ID: {uid}")
            
            crear_modules(gestor_mongo, uid, config_usuario['cost_code'], config_usuario['expense_code'])
            crear_integration(gestor_mongo, uid)
        
        print("\n" + "=" * 50)
        print("Configuraci√≥n completada exitosamente")
        print("=" * 50)
        print(f"Usuario: {config_usuario['email']}")
        print(f"UID: {uid}")
        print(f"Ambiente: {ambiente}")
        
        gestor_mongo.close()
        return str(uid)
        
    except Exception as e:
        print(f"Error de conexi√≥n MongoDB: {str(e)}")
        print(f"Error type: {type(e).__name__}")
        print("\nFull error details:")
        import traceback
        traceback.print_exc()
        print("\nPor favor verifica:")
        print("1. Credenciales AWS en archivo YAML")
        print("2. Conectividad de red")
        print("3. Estado del cluster MongoDB")
        print("4. Permisos IAM")
        sys.exit(1)